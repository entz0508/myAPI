// nodejs npm
const crypto      = require('crypto');

// common
const ROUTE_MIDDLEWARE   = require("../../common/util/route_middleware.js");
const PACKET     = require("../../common/util/packet_sender.js");
const COMMON_UTIL     = require("../../common/util/common.js");
const ERROR_CODE_UTIL     = require("../../common/util/error_code_util.js");

// log
const PRINT_LOG = global.PRINT_LOGGER;

// mysql
const MYSQL_SLP_PLATFORM_CONN = global.MYSQL_CONNECTOR_POOLS.SLP_PLATFORM;
const MYSQL_SLP_ACCOUNT_CONN = global.MYSQL_CONNECTOR_POOLS.SLP_ACCOUNT;


function add_routes(app) {
    "use strict";
    
    app.post("/slp.enProductList", ROUTE_MIDDLEWARE.NO_AUTH_APP, function(req, res){ 
        try {
            MYSQL_SLP_PLATFORM_CONN.procWatchdogPing(function(errPlatform, isPlatformSuccess){
                if(errPlatform || !isPlatformSuccess) {
                    var errPlatformResultOBJ = {};
                    errPlatformResultOBJ.msg ="Error, DB, Platform";
                    PACKET.sendJson(req, res, ERROR_CODE_UTIL.RES_FAILED_DB, errPlatformResultOBJ);
                } else {
                    MYSQL_SLP_ACCOUNT_CONN.procWatchdogPing(function(errAccount, isAccountSuccess){
                        if(errAccount || !isAccountSuccess) {
                            var errAccountResultOBJ = {};
                            errAccountResultOBJ.msg ="Error, DB, Account";
                            PACKET.sendJson(req, res, ERROR_CODE_UTIL.RES_FAILED_DB, errAccountResultOBJ);
                        } else {
                            var errAccountResultOBJ = {};
                            var resultOBJ = {};
                            
                            var xml2js = require('xml2js');
							var parser = new xml2js.Parser();
							var request = require("request");
							var crypted = "";
							
							var url = global.CONFIG.CDN_INFO.URI + "dea/data/product_dea_kr.xml";
							switch(req.body.language) {
								case "kr" : url = global.CONFIG.CDN_INFO.URI + "dea/data/product_dea_kr.xml";
                                    break;
                                case "en" : url = global.CONFIG.CDN_INFO.URI + "dea/data/product_dea_en.xml";
                                    break;
                                default : url = global.CONFIG.CDN_INFO.URI + "dea/data/product_dea_kr.xml";
                                    break;
							}
							
							request({
								uri: url,
								method: "GET"
							}, function(error, response, body) {
								parser.parseString(body, function(err, result) {
									var key = 'ehfksmschlrhdmlrydbrdyddoq@#$395'; //replace with your key
									var iv = 'BAEisTheBestTeam'; //replace with your IV
									var cipher = crypto.createCipheriv('aes256', key, iv)
									var crypted = cipher.update(body, 'utf8', 'base64')
									crypted += cipher.final('base64');

									resultOBJ.msg = crypted;
									//resultOBJ.msg = xmlString;


									PACKET.sendSuccess(req,res, resultOBJ);
							
								});
							});
							
                        }
                    });
                }
            });

        } catch(catchErr) {
            var msg = "[" + API_PATH + "] error, [" + __filename + "]";
            PRINT_LOG.setErrorLog(msg, catchErr);
            PACKET.sendFail(req, res, ERROR_CODE_UTIL.RES_FAILED_UNKNOWN);
        }
    });
    
    
	
	app.post("/slp.dlaProductList", ROUTE_MIDDLEWARE.NO_AUTH_APP, function(req, res){ 
        try {
            MYSQL_SLP_PLATFORM_CONN.procWatchdogPing(function(errPlatform, isPlatformSuccess){
                if(errPlatform || !isPlatformSuccess) {
                    var errPlatformResultOBJ = {};
                    errPlatformResultOBJ.msg ="Error, DB, Platform";
                    PACKET.sendJson(req, res, ERROR_CODE_UTIL.RES_FAILED_DB, errPlatformResultOBJ);
                } else {
                    MYSQL_SLP_ACCOUNT_CONN.procWatchdogPing(function(errAccount, isAccountSuccess){
                        if(errAccount || !isAccountSuccess) {
                            var errAccountResultOBJ = {};
                            errAccountResultOBJ.msg ="Error, DB, Account";
                            PACKET.sendJson(req, res, ERROR_CODE_UTIL.RES_FAILED_DB, errAccountResultOBJ);
                        } else {
                            var errAccountResultOBJ = {};
                            var resultOBJ = {};
							
							
                            var requestParams = {};
							requestParams.timeZone = COMMON_UTIL.trim(req.body.time_zone);
							requestParams.clientVer = COMMON_UTIL.trim(req.body.c_ver);
							
							if(requestParams.timeZone == "") {
								requestParams.timeZone = "Asia/Seoul";
							}
							
							var xml2js = require('xml2js');
							var parser = new xml2js.Parser();
							var request = require("request");
							var url = global.CONFIG.CDN_INFO.URI + "dla/data/dla_S1_product.xml";
							switch(COMMON_UTIL.trim(req.body.app_id)) {
								case "1000000003":
									url = global.CONFIG.CDN_INFO.URI + "dla/data/dla_S1_product.xml";
									break;
								case "1000000004":
									url = global.CONFIG.CDN_INFO.URI + "dla/data/dla_S2_product.xml";
									break;
								case "1000000005":
									url = global.CONFIG.CDN_INFO.URI + "dla/data/dla_S3_product.xml";
									break;
								default :
									PRINT_LOG.error(__filename, API_PATH, "AppID is Wrong");
									break;
							}
							var xmlString = "";
							var crypted = "";
							request({
								uri: url,
								method: "GET"
							}, function(error, response, body) {
								parser.parseString(body, function(err, result) {
									xmlString = body.replace(/\n/g, '').replace(/\t/g, '');
									var key = 'ehfksmschlrhdmlrydbrdyddoq@#$395'; //replace with your key
									var iv = 'BAEisTheBestTeam'; //replace with your IV
									var cipher = crypto.createCipheriv('aes256', key, iv)
									crypted = cipher.update(xmlString, 'utf8', 'base64')
									crypted += cipher.final('base64');
									
									if( requestParams.clientVer == "1.0.0") {
										// 암호화 
										resultOBJ.msg = crypted;
									} else {
										// 비 암호화
										resultOBJ.msg = xmlString;
									}
									PRINT_LOG.info("","",xmlString);
									PRINT_LOG.info("","",crypted);
									PACKET.sendSuccess(req,res, resultOBJ);
								});
							});
							
							/*
                            var xmlFileName = "/data/www/SERVICE_XML/slpdla/dla_product_"+ COMMON_UTIL.trim(req.body.app_id) +".xml"; 
                            var fs = require('fs');
                            var xmlString = fs.readFileSync(xmlFileName, "utf8"); 
                            
							xmlString = xmlString.replace(/\n/g, '').replace(/\t/g, '');
							
                            var key = 'ehfksmschlrhdmlrydbrdyddoq@#$395'; //replace with your key
                            var iv = 'BAEisTheBestTeam'; //replace with your IV
                            var cipher = crypto.createCipheriv('aes256', key, iv)
                            var crypted = cipher.update(xmlString, 'utf8', 'base64')
                            crypted += cipher.final('base64');
                            if( requestParams.clientVer == "1.0.0") {
								// 암호화 
								resultOBJ.msg = crypted;
							} else {
								// 비 암호화
								resultOBJ.msg = xmlString;
							}
                            PACKET.sendSuccess(req,res, resultOBJ);
							*/
                        }
                    });
                }
            });

        } catch(catchErr) {
            var msg = "[" + API_PATH + "] error, [" + __filename + "]";
            PRINT_LOG.setErrorLog(msg, catchErr);
            PACKET.sendFail(req, res, ERROR_CODE_UTIL.RES_FAILED_UNKNOWN);
        }
    });
	
	
}

exports.add_routes = add_routes;
